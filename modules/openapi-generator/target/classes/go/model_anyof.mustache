// {{classname}} {{{description}}}{{^description}}struct for {{{classname}}}{{/description}}
type {{classname}} struct {
	{{#anyOf}}
	{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}} *{{{.}}}
	{{/anyOf}}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *{{classname}}) UnmarshalJSON(data []byte) error {
	var err error
	{{#isNullable}}
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	{{/isNullable}}
	{{#anyOf}}
	// try to unmarshal JSON data into {{{.}}}
	err = json.Unmarshal(data, &dst.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}});
	if err == nil {
		json{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}, _ := json.Marshal(dst.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}})
		if string(json{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}) == "{}" { // empty struct
			dst.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}} = nil
		} else {
			return nil // data stored in dst.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}, return on the first match
		}
	} else {
		dst.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}} = nil
	}

	{{/anyOf}}
	return fmt.Errorf("data failed to match schemas in anyOf({{classname}})")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *{{classname}}) MarshalJSON() ([]byte, error) {
{{#anyOf}}
	if src.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}} != nil {
		return json.Marshal(&src.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}})
	}

{{/anyOf}}
	return nil, nil // no data in anyOf schemas
}

{{>nullable_model}}
